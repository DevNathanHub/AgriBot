// Generate inline keyboard for Telegram
function generateInlineKeyboard(buttons) {
    return {
        inline_keyboard: buttons
    };
}

// Generate reply keyboard for Telegram
function generateReplyKeyboard(buttons, options = {}) {
    return {
        keyboard: buttons,
        resize_keyboard: options.resize !== false,
        one_time_keyboard: options.oneTime || false,
        selective: options.selective || false
    };
}

// Predefined keyboards
const keyboards = {
    // Main menu keyboard
    mainMenu: () => generateInlineKeyboard([
        [
            { text: 'üå§Ô∏è Weather', callback_data: 'weather' },
            { text: 'üìä Market', callback_data: 'market' }
        ],
        [
            { text: 'üåæ Advice', callback_data: 'advice' },
            { text: 'üë§ Profile', callback_data: 'profile' }
        ],
        [
            { text: '‚öôÔ∏è Settings', callback_data: 'settings' },
            { text: '‚ùì Help', callback_data: 'help' }
        ]
    ]),

    // Weather options
    weatherOptions: () => generateInlineKeyboard([
        [
            { text: 'üå§Ô∏è Current Weather', callback_data: 'weather:current' },
            { text: 'üìÖ 5-Day Forecast', callback_data: 'weather:forecast' }
        ],
        [
            { text: 'üåæ Agricultural Weather', callback_data: 'weather:agricultural' },
            { text: 'üö® Weather Alerts', callback_data: 'weather:alerts' }
        ],
        [
            { text: 'üîô Back to Menu', callback_data: 'main_menu' }
        ]
    ]),

    // Market options
    marketOptions: () => generateInlineKeyboard([
        [
            { text: 'üí∞ Current Prices', callback_data: 'market:prices' },
            { text: 'üìà Price Trends', callback_data: 'market:trends' }
        ],
        [
            { text: 'üì∞ Market News', callback_data: 'market:news' },
            { text: 'üö® Price Alerts', callback_data: 'market:alerts' }
        ],
        [
            { text: 'üîô Back to Menu', callback_data: 'main_menu' }
        ]
    ]),

    // Crop selection
    cropSelection: () => generateInlineKeyboard([
        [
            { text: 'üåæ Wheat', callback_data: 'crop:wheat' },
            { text: 'üåΩ Corn', callback_data: 'crop:corn' }
        ],
        [
            { text: 'üçö Rice', callback_data: 'crop:rice' },
            { text: 'ü´ò Soybeans', callback_data: 'crop:soybeans' }
        ],
        [
            { text: 'üåø Cotton', callback_data: 'crop:cotton' },
            { text: 'üçÖ Vegetables', callback_data: 'crop:vegetables' }
        ],
        [
            { text: 'üçé Fruits', callback_data: 'crop:fruits' },
            { text: 'üå± Other', callback_data: 'crop:other' }
        ],
        [
            { text: '‚úÖ Done', callback_data: 'crop_selection:done' }
        ]
    ]),

    // Advice categories
    adviceCategories: () => generateInlineKeyboard([
        [
            { text: 'üå± Planting', callback_data: 'advice:planting' },
            { text: 'üíß Irrigation', callback_data: 'advice:irrigation' }
        ],
        [
            { text: 'üåø Fertilizers', callback_data: 'advice:fertilizers' },
            { text: 'üêõ Pest Control', callback_data: 'advice:pest_control' }
        ],
        [
            { text: 'ü¶† Disease Management', callback_data: 'advice:disease' },
            { text: 'üåæ Harvesting', callback_data: 'advice:harvesting' }
        ],
        [
            { text: '‚ôªÔ∏è Sustainability', callback_data: 'advice:sustainability' },
            { text: 'üîß Technology', callback_data: 'advice:technology' }
        ],
        [
            { text: 'üîô Back to Menu', callback_data: 'main_menu' }
        ]
    ]),

    // Profile options
    profileOptions: () => generateInlineKeyboard([
        [
            { text: '‚úèÔ∏è Edit Profile', callback_data: 'profile:edit' },
            { text: 'üìç Update Location', callback_data: 'profile:location' }
        ],
        [
            { text: 'üåæ Update Crops', callback_data: 'profile:crops' },
            { text: 'üéØ Set Interests', callback_data: 'profile:interests' }
        ],
        [
            { text: 'üîô Back to Menu', callback_data: 'main_menu' }
        ]
    ]),

    // Settings options
    settingsOptions: () => generateInlineKeyboard([
        [
            { text: 'üîî Notifications', callback_data: 'settings:notifications' },
            { text: 'üåê Language', callback_data: 'settings:language' }
        ],
        [
            { text: '‚è∞ Update Times', callback_data: 'settings:times' },
            { text: 'üéõÔ∏è Preferences', callback_data: 'settings:preferences' }
        ],
        [
            { text: 'üîô Back to Menu', callback_data: 'main_menu' }
        ]
    ]),

    // Notification settings
    notificationSettings: (user) => {
        const settings = user.botData?.notificationSettings || {};
        return generateInlineKeyboard([
            [
                { 
                    text: `üå§Ô∏è Weather ${settings.weather ? '‚úÖ' : '‚ùå'}`, 
                    callback_data: 'toggle:weather' 
                },
                { 
                    text: `üìä Market ${settings.marketPrices ? '‚úÖ' : '‚ùå'}`, 
                    callback_data: 'toggle:market' 
                }
            ],
            [
                { 
                    text: `üí° Tips ${settings.tips ? '‚úÖ' : '‚ùå'}`, 
                    callback_data: 'toggle:tips' 
                },
                { 
                    text: `üö® Alerts ${settings.alerts ? '‚úÖ' : '‚ùå'}`, 
                    callback_data: 'toggle:alerts' 
                }
            ],
            [
                { text: 'üîô Back to Settings', callback_data: 'settings' }
            ]
        ]);
    },

    // Language selection
    languageSelection: () => generateInlineKeyboard([
        [
            { text: 'üá∫üá∏ English', callback_data: 'lang:en' },
            { text: 'üá™üá∏ Espa√±ol', callback_data: 'lang:es' }
        ],
        [
            { text: 'üá´üá∑ Fran√ßais', callback_data: 'lang:fr' },
            { text: 'üá©üá™ Deutsch', callback_data: 'lang:de' }
        ],
        [
            { text: 'üáÆüá≥ ‡§π‡§ø‡§Ç‡§¶‡•Ä', callback_data: 'lang:hi' },
            { text: 'üá®üá≥ ‰∏≠Êñá', callback_data: 'lang:zh' }
        ],
        [
            { text: 'üîô Back to Settings', callback_data: 'settings' }
        ]
    ]),

    // Farming experience levels
    experienceLevels: () => generateInlineKeyboard([
        [
            { text: 'üå± Beginner', callback_data: 'experience:beginner' },
            { text: 'üåæ Intermediate', callback_data: 'experience:intermediate' }
        ],
        [
            { text: 'üöú Advanced', callback_data: 'experience:advanced' },
            { text: 'üë®‚Äçüåæ Expert', callback_data: 'experience:expert' }
        ]
    ]),

    // Farming types
    farmingTypes: () => generateInlineKeyboard([
        [
            { text: 'üåø Organic', callback_data: 'farming_type:organic' },
            { text: 'üî¨ Conventional', callback_data: 'farming_type:conventional' }
        ],
        [
            { text: 'üíß Hydroponic', callback_data: 'farming_type:hydroponic' },
            { text: 'üîÑ Mixed', callback_data: 'farming_type:mixed' }
        ]
    ]),

    // Interests selection
    interestsSelection: () => generateInlineKeyboard([
        [
            { text: 'üå§Ô∏è Weather', callback_data: 'interest:weather' },
            { text: 'üìä Market Prices', callback_data: 'interest:market_prices' }
        ],
        [
            { text: 'üêõ Pest Control', callback_data: 'interest:pest_control' },
            { text: 'üåø Fertilizers', callback_data: 'interest:fertilizers' }
        ],
        [
            { text: 'üíß Irrigation', callback_data: 'interest:irrigation' },
            { text: 'üî¨ Technology', callback_data: 'interest:technology' }
        ],
        [
            { text: '‚ôªÔ∏è Sustainability', callback_data: 'interest:sustainability' },
            { text: '‚úÖ Done', callback_data: 'interests:done' }
        ]
    ]),

    // Subscription options
    subscriptionOptions: () => generateInlineKeyboard([
        [
            { text: 'üÜì Free Plan', callback_data: 'subscription:free' },
            { text: '‚≠ê Premium Plan', callback_data: 'subscription:premium' }
        ],
        [
            { text: 'üíé Pro Plan', callback_data: 'subscription:pro' },
            { text: 'üìä Compare Plans', callback_data: 'subscription:compare' }
        ],
        [
            { text: 'üîô Back to Menu', callback_data: 'main_menu' }
        ]
    ]),

    // Feedback options
    feedbackOptions: () => generateInlineKeyboard([
        [
            { text: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: 'feedback:5' },
            { text: '‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: 'feedback:4' }
        ],
        [
            { text: '‚≠ê‚≠ê‚≠ê', callback_data: 'feedback:3' },
            { text: '‚≠ê‚≠ê', callback_data: 'feedback:2' }
        ],
        [
            { text: '‚≠ê', callback_data: 'feedback:1' },
            { text: 'üìù Write Review', callback_data: 'feedback:write' }
        ]
    ]),

    // Quick actions
    quickActions: () => generateInlineKeyboard([
        [
            { text: 'üå§Ô∏è Today\'s Weather', callback_data: 'quick:weather_today' },
            { text: 'üìä Market Update', callback_data: 'quick:market_update' }
        ],
        [
            { text: 'üí° Random Tip', callback_data: 'quick:random_tip' },
            { text: 'üì∞ Latest News', callback_data: 'quick:latest_news' }
        ]
    ]),

    // Confirmation buttons
    confirmation: (action) => generateInlineKeyboard([
        [
            { text: '‚úÖ Yes', callback_data: `confirm:${action}:yes` },
            { text: '‚ùå No', callback_data: `confirm:${action}:no` }
        ]
    ]),

    // Back button
    backButton: (target = 'main_menu') => generateInlineKeyboard([
        [
            { text: 'üîô Back', callback_data: target }
        ]
    ]),

    // Close button
    closeButton: () => generateInlineKeyboard([
        [
            { text: '‚ùå Close', callback_data: 'close' }
        ]
    ])
};

// Utility functions for keyboards
function addBackButton(keyboard, target = 'main_menu') {
    const backRow = [{ text: 'üîô Back', callback_data: target }];
    keyboard.inline_keyboard.push(backRow);
    return keyboard;
}

function addCloseButton(keyboard) {
    const closeRow = [{ text: '‚ùå Close', callback_data: 'close' }];
    keyboard.inline_keyboard.push(closeRow);
    return keyboard;
}

function createPaginationKeyboard(currentPage, totalPages, baseCallback) {
    const buttons = [];
    
    if (currentPage > 1) {
        buttons.push({ text: '‚¨ÖÔ∏è Previous', callback_data: `${baseCallback}:${currentPage - 1}` });
    }
    
    buttons.push({ text: `${currentPage}/${totalPages}`, callback_data: 'page_info' });
    
    if (currentPage < totalPages) {
        buttons.push({ text: 'Next ‚û°Ô∏è', callback_data: `${baseCallback}:${currentPage + 1}` });
    }

    return generateInlineKeyboard([buttons]);
}

function createCropSelectionKeyboard(selectedCrops = []) {
    const allCrops = [
        { name: 'Wheat', value: 'wheat', emoji: 'üåæ' },
        { name: 'Corn', value: 'corn', emoji: 'üåΩ' },
        { name: 'Rice', value: 'rice', emoji: 'üçö' },
        { name: 'Soybeans', value: 'soybeans', emoji: 'ü´ò' },
        { name: 'Cotton', value: 'cotton', emoji: 'üåø' },
        { name: 'Tomato', value: 'tomato', emoji: 'üçÖ' },
        { name: 'Potato', value: 'potato', emoji: 'ü•î' },
        { name: 'Onion', value: 'onion', emoji: 'üßÖ' }
    ];

    const buttons = [];
    for (let i = 0; i < allCrops.length; i += 2) {
        const row = [];
        for (let j = 0; j < 2 && (i + j) < allCrops.length; j++) {
            const crop = allCrops[i + j];
            const isSelected = selectedCrops.includes(crop.value);
            const text = `${crop.emoji} ${crop.name} ${isSelected ? '‚úÖ' : ''}`;
            row.push({ text, callback_data: `toggle_crop:${crop.value}` });
        }
        buttons.push(row);
    }

    buttons.push([{ text: '‚úÖ Done', callback_data: 'crop_selection:done' }]);

    return generateInlineKeyboard(buttons);
}

module.exports = {
    generateInlineKeyboard,
    generateReplyKeyboard,
    keyboards,
    addBackButton,
    addCloseButton,
    createPaginationKeyboard,
    createCropSelectionKeyboard
};
